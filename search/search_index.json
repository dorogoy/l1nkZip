{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>L1nkZip is a simple URL shortener API. It is written in Python and uses the Fastapi framework and Pony ORM. The main features of this project are strong privacy, simplicity and low resource usage to have cheaper hosting as possible. The first option in L1nkZip is always a combination of sqlite for the database and litestream for its replication and resilience from cheap and volatile environments. Using Pony ORM allows other options if sqlite is not of your taste. This app is mainly focused on running inside a container managed by Kubernetes or docker.</p> <p>The code of l1nkZip is available at its Github repository under the MIT license. You can check all the available endpoints at the API documentation.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Free URL shortener available at https://l1nk.zip/docs.</li> <li>Simple to setup, low resource usage and low maintenance for cheap self-hosting.</li> <li>Using litestream, you will have a reliable database almost impossible to destroy, backed on any compatible and unexpensive S3 bucket.</li> <li>Although litestream being, in most cases, the best choice, Postgresql is also available. Other databases like MySQL, Oracle or CockroachDB can be used building your own images.</li> <li>Optional protection against phishing using the PhishTank database.</li> <li>Built-in rate limiting to prevent abuse through mass URL creation and enumeration attacks.</li> <li>Optional Redis caching for improved performance on frequently accessed URLs.</li> </ul>"},{"location":"#user-manual","title":"User manual","text":"<p>Being an API, URLs can be posted in many different ways. These examples are using the official API domain, available for general usage by everyone, but you can self-host it and use your own domain. If you are interested on self-hosting, check the installation page.</p> <p>From the command-line, you have plenty of options, like curl, wget, httpie or httpx to just name a few. Here is an example with <code>curl</code>:</p> <pre><code>curl -X 'POST' \\\n  'https://l1nk.zip/url' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"url\": \"https://www.google.com\"}'\n</code></pre> <p>or a shorter one with <code>httpx</code>:</p> <pre><code>httpx -m POST -j '{\"url\": \"https://www.google.com\"}' https://l1nk.zip/url\n</code></pre> <p>You can also use non CLI apps, like Postman or Insomnia. Or even the included Swagger UI that allows you to add a link quickly from a web form.</p> <p>Of course, you can also use your preferred programming language. Here is an example in Python:</p> <pre><code>import httpx\n\nurl = \"https://www.google.com\"\nheader = {\"Content-Type\": \"application/json\"}\nresponse = httpx.post(\"https://l1nk.zip/url\", header=header, json={\"url\": url})\nprint(response.json())\n</code></pre> <p>or PHP:</p> <pre><code>&lt;?php\n$ch = curl_init(\"https://l1nk.zip/url\");\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode([\"url\" =&gt; \"https://www.google.com\"]));\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\"Content-Type: application/json\"]);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n$response = curl_exec($ch);\ncurl_close($ch);\necho $response;\n</code></pre> <p>It's all about options.</p>"},{"location":"#official-l1nkzip-cli","title":"Official L1nkZip CLI","text":"<p>For a dedicated command-line experience, L1nkZip has an official CLI client available at l1nkzip-cli. The CLI provides a modern, rich-powered interface with beautiful output formatting.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>curl -O https://raw.githubusercontent.com/dorogoy/l1nkzip-cli/master/main.py\nchmod +x main.py\nchmod +x l1nkzip\n</code></pre>"},{"location":"#usage-examples","title":"Usage Examples","text":"<p>Shorten a URL: <pre><code>./main.py shorten https://www.google.com\n</code></pre></p> <p>Get information about a short link: <pre><code>./main.py info abc123\n</code></pre></p> <p>List all URLs (requires API token): <pre><code>./main.py list --token YOUR_TOKEN\n</code></pre></p> <p>Update PhishTank database (admin only): <pre><code>./main.py update-phishtank --token YOUR_TOKEN\n</code></pre></p>"},{"location":"#configuration","title":"Configuration","text":"<ul> <li>Set API token via <code>L1NKZIP_TOKEN</code> environment variable or <code>--token</code> flag</li> <li>Custom API endpoint via <code>L1NKZIP_API_URL</code> environment variable</li> <li>Defaults to <code>https://l1nk.zip</code> if not specified</li> </ul> <p>The CLI uses rich for beautiful output and uv for dependency management.</p>"},{"location":"#rate-limiting","title":"Rate Limiting","text":"<p>L1nkZip includes built-in rate limiting to protect against abuse:</p>"},{"location":"#default-limits","title":"Default Limits","text":"<ul> <li>URL Creation: 10 requests per minute per IP address</li> <li>URL Redirection: 120 requests per minute per IP address</li> <li>Admin Endpoints: No rate limiting when using valid authentication token</li> </ul>"},{"location":"#customization","title":"Customization","text":"<p>You can customize rate limits using environment variables:</p> <pre><code># Custom rate limits (format: \"requests/period\")\nexport RATE_LIMIT_CREATE=\"20/minute\"    # URL creation limit\nexport RATE_LIMIT_REDIRECT=\"180/minute\"  # URL redirection limit\n</code></pre>"},{"location":"#rate-limit-headers","title":"Rate Limit Headers","text":"<p>When rate limited, responses include informative headers: - <code>X-RateLimit-Limit</code>: Maximum requests allowed - <code>X-RateLimit-Remaining</code>: Remaining requests in current period - <code>X-RateLimit-Reset</code>: Time when limit resets (UTC timestamp)</p>"},{"location":"#redis-caching","title":"Redis Caching","text":"<p>For improved performance, L1nkZip supports optional Redis caching:</p>"},{"location":"#configuration_1","title":"Configuration","text":"<p>Enable caching by setting the Redis server URL:</p> <pre><code># Enable Redis caching (Optional)\nexport REDIS_SERVER=redis://localhost:6379/0\n\n# Optional: Custom cache TTL (default: 86400 seconds = 24 hours)\nexport REDIS_TTL=3600  # 1 hour TTL\n</code></pre>"},{"location":"#how-it-works","title":"How It Works","text":"<ul> <li>Cache Hits: Frequently accessed URLs are served from Redis, reducing database load</li> <li>Cache Misses: URLs not in cache are fetched from database and cached automatically</li> <li>Visit Counting: Visit statistics are maintained accurately even for cached requests</li> <li>TTL Expiration: Cached entries automatically expire after configured time</li> </ul>"},{"location":"#benefits","title":"Benefits","text":"<ul> <li>Performance: Faster redirects for popular URLs</li> <li>Scalability: Reduced database load under high traffic</li> <li>Optional: Fully disabled when Redis is not configured</li> <li>Configurable: TTL can be adjusted based on usage patterns</li> </ul>"},{"location":"#self-hosting-notes","title":"Self-Hosting Notes","text":"<p>When self-hosting with Redis: 1. Ensure Redis server is running and accessible 2. Set appropriate TTL based on your traffic patterns 3. Monitor cache hit rates for performance optimization</p>"},{"location":"selfhosting/","title":"Self-hosting","text":"<p>L1nkZip is distributed as a Docker image, although the full code can be found on the Github repository in case you want to use it directly or contribute. It can be run as a Docker container or deployed to a Kubernetes cluster. Litestream is not required to run L1nkZip, but it is strongly encouraged if you are going to use sqlite.</p>"},{"location":"selfhosting/#requirements","title":"Requirements","text":"<p>L1nkZip would not be possible without the amazings FastApi and PonyORM projects. The only requirement is Python 3.12+ if you use sqlite. Otherwise, you must install the database driver for your database of choice.</p> <p>The official Docker image comes with sqlite and postgresql support, but you can extend it to support other databases.</p> <ul> <li>mysql: MySQLdb</li> <li>oracle: cx_oracle</li> </ul> <p>Example from a Dockerfile extending the Docker image to support MySQL:</p> <pre><code>FROM dorogoy/l1nkzip:latest\n\nRUN uv pip install --system --no-cache-dir MySQL-python\n</code></pre> <p>For more information check the PonyORM documentation.</p>"},{"location":"selfhosting/#configuration","title":"Configuration","text":""},{"location":"selfhosting/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>API_DOMAIN</code>: Domain of the API. This is the domain of the shortened URLs.</li> <li><code>DB_TYPE</code>: Database type. Supported values are <code>inmemory</code>, <code>sqlite</code> and <code>postgresql</code>. Other databases like <code>mysql</code>, <code>oracle</code>, and <code>cockroachdb</code> are also supported thanks to PonyORM, but require additional drivers.</li> <li><code>DB_NAME</code>: Database name. Used for sqlite and postgresql.</li> <li><code>TOKEN</code>: Token used to authenticate some administrative actions to the API. This is a secret value and should not be shared.</li> <li><code>GENERATOR_STRING</code>: String used to generate the shortened URLs. This is a secret value and should not be shared. You can shuffle uppercase, lowercase letters and/or numbers without repeating them.</li> </ul>"},{"location":"selfhosting/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>API_NAME</code>: Name of the API. Used in the OpenAPI documentation. Default: L1nkZip</li> <li><code>DB_HOST</code>: Database host. Used for postgresql.</li> <li><code>DB_USER</code>: Database user. Used for postgresql.</li> <li><code>DB_PASSWORD</code>: Database password. Used for postgresql.</li> <li><code>DB_DSN</code>: Database DSN. Used for Oracle.</li> <li><code>SITE_URL</code>: URL of the website. Used when the API is visited from a browser.</li> <li><code>PHISHTANK</code>: Enable protection against phishing. Default: false. The values can also be \"anonymous\" or your actual PhishTank key. More details below.</li> <li><code>REDIS_SERVER</code>: Redis server URL for caching (e.g., redis://localhost:6379/0). Optional.</li> <li><code>REDIS_TTL</code>: Time-to-live for cached URLs in seconds. Default: 86400 (24 hours).</li> <li><code>RATE_LIMIT_CREATE</code>: Rate limit for URL creation. Default: \"10/minute\".</li> <li><code>RATE_LIMIT_REDIRECT</code>: Rate limit for URL redirection. Default: \"120/minute\".</li> <li><code>METRICS_ENABLED</code>: Enable Prometheus metrics endpoint. Default: false.</li> <li><code>LOG_LEVEL</code>: Logging level. Default: \"INFO\". Options: \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\".</li> <li><code>LOG_FORMAT</code>: Log format. Default: \"text\". Set to \"json\" for structured logging.</li> </ul>"},{"location":"selfhosting/#phishtank-support","title":"Phishtank support","text":"<p>L1nkZip can be configured to check if the URL to be shortened is in the PhishTank database. This is an optional feature and can be enabled by setting the <code>PHISHTANK</code> environment variable to <code>anonymous</code> or your actual PhishTank key.</p> <p>To avoid overloading the service, the Phishtank database is downloaded into the local L1nkZip database. This action will be launched each time the update endpoint is contacted successfully. The update endpoint is protected by the <code>TOKEN</code> environment variable and should be called periodically by a cronjob or similar. Please, be respectful with the Phishtank policies. Check the API documentation for more details about the update endpoint.</p> <p>Each update to the Phishtank database can add new entries and remove old ones. This will keep the size of the database under control, it is not growing all the time. When an entry is removed from the database, the shortened URL will be allowed/reactivated again. Keep in mind that L1nkZip is not a censorship tool and it is not intended to be used as such.</p>"},{"location":"selfhosting/#docker-image","title":"Docker image","text":"<p>The docker image is available on Docker Hub.</p> <pre><code>docker pull dorogoy/l1nkzip\n</code></pre>"},{"location":"selfhosting/#kubernetes-manifest","title":"Kubernetes manifest","text":"<p>This is an example of a StatefulSet to deploy L1nkZip to a Kubernetes cluster. The required secrets are not included and it uses a sqlite database with litestream. This example is for a S3 compatible service (idrive e2), Amazon S3 configuration for AWS is slightly different. Please, have a look at the Litestream documentation for more details.</p> <pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: litestream\ndata:\n  litestream.yml: |\n    dbs:\n      - path: /data/l1nkzip.db\n        replicas:\n          - type: s3\n            bucket: &lt;your-bucket&gt;\n            path: l1nkzip.db\n            endpoint: &lt;your-endpoint&gt;\n            region: &lt;your-region&gt;\n            force-path-style: true\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: l1nkzip\nspec:\n  selector:\n    app: l1nkzip\n  type: ClusterIP\n  ports:\n    - name: http\n      protocol: TCP\n      port: 80\n      targetPort: 80\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: l1nkzip\nspec:\n  selector:\n    matchLabels:\n      app: l1nkzip\n  serviceName: l1nkzip\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: l1nkzip\n    spec:\n      initContainers:\n        - name: init-litestream\n          image: litestream/litestream:0.3.9\n          args:\n            [\n              \"restore\",\n              \"-if-db-not-exists\",\n              \"-if-replica-exists\",\n              \"-v\",\n              \"$(DB_NAME)\",\n            ]\n          volumeMounts:\n            - name: l1nkzip\n              mountPath: /data\n            - name: litestream\n              mountPath: /etc/litestream.yml\n              subPath: litestream.yml\n          env:\n            - name: LITESTREAM_ACCESS_KEY_ID\n              valueFrom:\n                secretKeyRef:\n                  name: l1nkzip-secret\n                  key: LITESTREAM_ACCESS_KEY_ID\n            - name: LITESTREAM_SECRET_ACCESS_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: l1nkzip-secret\n                  key: LITESTREAM_SECRET_ACCESS_KEY\n            - name: DB_NAME\n              valueFrom:\n                configMapKeyRef:\n                  name: l1nkzip-config\n                  key: DB_NAME\n      containers:\n        - name: litestream\n          image: litestream/litestream:0.3.9\n          args: [\"replicate\"]\n          volumeMounts:\n            - name: l1nkzip\n              mountPath: /data\n            - name: litestream\n              mountPath: /etc/litestream.yml\n              subPath: litestream.yml\n          env:\n            - name: LITESTREAM_ACCESS_KEY_ID\n              valueFrom:\n                secretKeyRef:\n                  name: l1nkzip-secret\n                  key: LITESTREAM_ACCESS_KEY_ID\n            - name: LITESTREAM_SECRET_ACCESS_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: l1nkzip-secret\n                  key: LITESTREAM_SECRET_ACCESS_KEY\n          ports:\n            - name: metrics\n              containerPort: 9090\n        - name: l1nkzip\n          image: dorogoy/l1nkzip:latest\n          imagePullPolicy: Always\n          ports:\n            - name: http\n              containerPort: 80\n          volumeMounts:\n            - name: l1nkzip\n              mountPath: /data\n            - name: litestream\n              mountPath: /etc/litestream.yml\n              subPath: litestream.yml\n          env:\n            - name: TOKEN\n              valueFrom:\n                secretKeyRef:\n                  name: l1nkzip-secret\n                  key: TOKEN\n            - name: GENERATOR_STRING\n              valueFrom:\n                secretKeyRef:\n                  name: l1nkzip-secret\n                  key: GENERATOR_STRING\n            - name: PHISHTANK\n              value: \"anonymous\"\n            - name: DB_TYPE\n              value: sqlite\n            - name: DB_NAME\n              valueFrom:\n                configMapKeyRef:\n                  name: l1nkzip-config\n                  key: DB_NAME\n            - name: API_DOMAIN\n              valueFrom:\n                configMapKeyRef:\n                  name: l1nkzip-config\n                  key: API_DOMAIN\n            - name: SITE_URL\n              valueFrom:\n                configMapKeyRef:\n                  name: l1nkzip-config\n                  key: SITE_URL\n      volumes:\n        - name: litestream\n          configMap:\n            name: litestream\n        - name: l1nkzip\n          persistentVolumeClaim:\n            claimName: l1nkzip\n  volumeClaimTemplates:\n    - metadata:\n        name: l1nkzip\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n</code></pre>"},{"location":"selfhosting/#docker-compose-example","title":"Docker Compose Example","text":"<p>This example shows how to run L1nkZip with PostgreSQL and Redis using Docker Compose:</p> <pre><code>version: '3.8'\n\nservices:\n  postgres:\n    image: postgres:17-alpine\n    environment:\n      POSTGRES_DB: l1nkzip\n      POSTGRES_USER: l1nkzip\n      POSTGRES_PASSWORD: your-postgres-password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U l1nkzip -d l1nkzip\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  l1nkzip:\n    image: dorogoy/l1nkzip:latest\n    ports:\n      - \"8000:80\"\n    environment:\n      # Required environment variables\n      API_DOMAIN: \"http://localhost:8000\"\n      DB_TYPE: \"postgres\"\n      DB_NAME: \"l1nkzip\"\n      DB_HOST: \"postgres\"\n      DB_PORT: \"5432\"\n      DB_USER: \"l1nkzip\"\n      DB_PASSWORD: \"your-postgres-password\"\n      TOKEN: \"your-secret-admin-token\"\n      GENERATOR_STRING: \"your-custom-alphabet-here\"\n\n      # Optional environment variables\n      PHISHTANK: \"anonymous\"\n      REDIS_SERVER: \"redis://redis:6379/0\"\n      REDIS_TTL: \"86400\"\n      RATE_LIMIT_CREATE: \"10/minute\"\n      RATE_LIMIT_REDIRECT: \"120/minute\"\n      METRICS_ENABLED: \"true\"\n      LOG_LEVEL: \"INFO\"\n      LOG_FORMAT: \"json\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre> <p>To use this configuration:</p> <ol> <li>Create a <code>docker-compose.yml</code> file with the above content</li> <li>Replace the placeholder values:</li> <li><code>your-postgres-password</code>: A strong password for PostgreSQL</li> <li><code>your-secret-admin-token</code>: A secure token for admin operations</li> <li><code>your-custom-alphabet</code>: A shuffled string of characters for URL generation (e.g., \"aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789\")</li> <li>Run: <code>docker-compose up -d</code></li> </ol> <p>The API will be available at <code>http://localhost:8000</code> with: - PostgreSQL database for persistent storage - Redis caching for improved performance - JSON structured logging - Prometheus metrics at <code>/metrics</code> - Health checks at <code>/health</code></p>"},{"location":"selfhosting/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>L1nkZip supports comprehensive monitoring through Prometheus metrics and structured logging.</p>"},{"location":"selfhosting/#metrics-endpoint","title":"Metrics Endpoint","text":"<p>When <code>METRICS_ENABLED=true</code> is set, L1nkZip exposes a Prometheus metrics endpoint at <code>/metrics</code>. This includes:</p> <ul> <li>HTTP request metrics (count, latency, error rates)</li> <li>Cache performance metrics (hit/miss rates)</li> <li>Business metrics (URLs created, redirects, phishing blocks)</li> <li>Database connection metrics</li> </ul>"},{"location":"selfhosting/#structured-logging","title":"Structured Logging","text":"<p>Set <code>LOG_FORMAT=json</code> to enable JSON-formatted structured logging with fields including: - Request tracing IDs - Response times - Error details - Cache operations - Phishing detection events</p>"},{"location":"selfhosting/#example-monitoring-configuration","title":"Example Monitoring Configuration","text":"<pre><code># Add to your Kubernetes deployment env vars\n- name: METRICS_ENABLED\n  value: \"true\"\n- name: LOG_FORMAT\n  value: \"json\"\n- name: LOG_LEVEL\n  value: \"INFO\"\n</code></pre>"},{"location":"selfhosting/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Pre-built Grafana dashboards are available for: - API performance monitoring - Cache efficiency analysis - Business metrics tracking - Error rate and latency monitoring</p>"},{"location":"selfhosting/#alerting","title":"Alerting","text":"<p>Configure Prometheus alert rules for: - High error rates (&gt;5% for 5 minutes) - Service availability (container down) - High latency (95th percentile &gt;1 second) - Low cache hit rate (&lt;70%) - High phishing block rates</p>"},{"location":"selfhosting/#health-checks","title":"Health Checks","text":"<p>The health endpoint at <code>/health</code> provides: - Database connectivity status - Service availability - Basic dependency checks</p>"}]}